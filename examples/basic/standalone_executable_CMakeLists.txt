cmake_minimum_required(VERSION 3.0)

# Set the name of the project.
project(YourProjectName)

find_package(cmake_helper REQUIRED)

# Set default lib/bin output folders for compiled libraries/binaries.
cmh_set_output_directories()

# Find modules designed with cmake_helper using find_package commands.
# To hard-code a hint as to where to find the module, use the PATHS option.
# ex. find_package(module_name)
# ex. find_package(module_name PATHS ${CMAKE_CURRENT_LIST_DIR}/../module_name_dir)

# Find 3rd-party packages.
# ex. find_package(Boost COMPONENTS system thread)
# ex. find_package(OpenCV COMPONENTS core)

# Create an executable with the given source files.
add_executable(${PROJECT_NAME}
  # ex. main.cpp
  # ex. src/main.cpp
  # ex. ${CMAKE_CURRENT_LIST_DIR}/../main.cpp
)

# Set the compile definitions for this executable.
target_compile_definitions(${PROJECT_NAME} PUBLIC
  # ex. PREPROCESSOR_FLAG
  # ex. PREPROCESSOR_PATH="${CMAKE_CURRENT_LIST_DIR}/../path"
)

# Set the include directories for this executable.
target_include_directories(${PROJECT_NAME} PUBLIC
  # ex. ${CMAKE_CURRENT_LIST_DIR}/src
  # ex. ${Boost_INCLUDE_DIR}
  # ex. ${OpenCV_INCLUDE_DIRS}
)

# Set the libraries that need to be linked to this executable.
target_link_libraries(${PROJECT_NAME} PUBLIC
  # ex. ${Boost_LIBRARIES}
  # ex. ${OpenCV_LIBS}
)

# Link the cmake_helper modules to this executable.
cmh_link_modules(${PROJECT_NAME})
